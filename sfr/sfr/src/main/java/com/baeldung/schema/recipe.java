/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.baeldung.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class recipe extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1270347308223866309L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"recipe\",\"namespace\":\"com.baeldung.schema\",\"fields\":[{\"name\":\"id\",\"type\":\"int\",\"doc\":\"Id of the recipe\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the recipe\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"Description of the recipe\"},{\"name\":\"ingredients\",\"type\":\"string\",\"doc\":\"Ingredients of the recipe\"},{\"name\":\"instructions\",\"type\":\"string\",\"doc\":\"Instructions of the recipe\"},{\"name\":\"evaluation\",\"type\":\"int\",\"doc\":\"Evaluation of the recipe\"},{\"name\":\"prepationTime\",\"type\":\"int\",\"doc\":\"Preparation time of the recipe\"},{\"name\":\"category\",\"type\":\"string\",\"doc\":\"Category of the recipe\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<recipe> ENCODER =
      new BinaryMessageEncoder<recipe>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<recipe> DECODER =
      new BinaryMessageDecoder<recipe>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<recipe> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<recipe> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<recipe>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this recipe to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a recipe from a ByteBuffer. */
  public static recipe fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Id of the recipe */
  @Deprecated public int id;
  /** Name of the recipe */
  @Deprecated public java.lang.CharSequence name;
  /** Description of the recipe */
  @Deprecated public java.lang.CharSequence description;
  /** Ingredients of the recipe */
  @Deprecated public java.lang.CharSequence ingredients;
  /** Instructions of the recipe */
  @Deprecated public java.lang.CharSequence instructions;
  /** Evaluation of the recipe */
  @Deprecated public int evaluation;
  /** Preparation time of the recipe */
  @Deprecated public int prepationTime;
  /** Category of the recipe */
  @Deprecated public java.lang.CharSequence category;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public recipe() {}

  /**
   * All-args constructor.
   * @param id Id of the recipe
   * @param name Name of the recipe
   * @param description Description of the recipe
   * @param ingredients Ingredients of the recipe
   * @param instructions Instructions of the recipe
   * @param evaluation Evaluation of the recipe
   * @param prepationTime Preparation time of the recipe
   * @param category Category of the recipe
   */
  public recipe(java.lang.Integer id, java.lang.CharSequence name, java.lang.CharSequence description, java.lang.CharSequence ingredients, java.lang.CharSequence instructions, java.lang.Integer evaluation, java.lang.Integer prepationTime, java.lang.CharSequence category) {
    this.id = id;
    this.name = name;
    this.description = description;
    this.ingredients = ingredients;
    this.instructions = instructions;
    this.evaluation = evaluation;
    this.prepationTime = prepationTime;
    this.category = category;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return description;
    case 3: return ingredients;
    case 4: return instructions;
    case 5: return evaluation;
    case 6: return prepationTime;
    case 7: return category;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: description = (java.lang.CharSequence)value$; break;
    case 3: ingredients = (java.lang.CharSequence)value$; break;
    case 4: instructions = (java.lang.CharSequence)value$; break;
    case 5: evaluation = (java.lang.Integer)value$; break;
    case 6: prepationTime = (java.lang.Integer)value$; break;
    case 7: category = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Id of the recipe
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * Id of the recipe
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return Name of the recipe
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Name of the recipe
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Description of the recipe
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * Description of the recipe
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'ingredients' field.
   * @return Ingredients of the recipe
   */
  public java.lang.CharSequence getIngredients() {
    return ingredients;
  }

  /**
   * Sets the value of the 'ingredients' field.
   * Ingredients of the recipe
   * @param value the value to set.
   */
  public void setIngredients(java.lang.CharSequence value) {
    this.ingredients = value;
  }

  /**
   * Gets the value of the 'instructions' field.
   * @return Instructions of the recipe
   */
  public java.lang.CharSequence getInstructions() {
    return instructions;
  }

  /**
   * Sets the value of the 'instructions' field.
   * Instructions of the recipe
   * @param value the value to set.
   */
  public void setInstructions(java.lang.CharSequence value) {
    this.instructions = value;
  }

  /**
   * Gets the value of the 'evaluation' field.
   * @return Evaluation of the recipe
   */
  public java.lang.Integer getEvaluation() {
    return evaluation;
  }

  /**
   * Sets the value of the 'evaluation' field.
   * Evaluation of the recipe
   * @param value the value to set.
   */
  public void setEvaluation(java.lang.Integer value) {
    this.evaluation = value;
  }

  /**
   * Gets the value of the 'prepationTime' field.
   * @return Preparation time of the recipe
   */
  public java.lang.Integer getPrepationTime() {
    return prepationTime;
  }

  /**
   * Sets the value of the 'prepationTime' field.
   * Preparation time of the recipe
   * @param value the value to set.
   */
  public void setPrepationTime(java.lang.Integer value) {
    this.prepationTime = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return Category of the recipe
   */
  public java.lang.CharSequence getCategory() {
    return category;
  }

  /**
   * Sets the value of the 'category' field.
   * Category of the recipe
   * @param value the value to set.
   */
  public void setCategory(java.lang.CharSequence value) {
    this.category = value;
  }

  /**
   * Creates a new recipe RecordBuilder.
   * @return A new recipe RecordBuilder
   */
  public static com.baeldung.schema.recipe.Builder newBuilder() {
    return new com.baeldung.schema.recipe.Builder();
  }

  /**
   * Creates a new recipe RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new recipe RecordBuilder
   */
  public static com.baeldung.schema.recipe.Builder newBuilder(com.baeldung.schema.recipe.Builder other) {
    return new com.baeldung.schema.recipe.Builder(other);
  }

  /**
   * Creates a new recipe RecordBuilder by copying an existing recipe instance.
   * @param other The existing instance to copy.
   * @return A new recipe RecordBuilder
   */
  public static com.baeldung.schema.recipe.Builder newBuilder(com.baeldung.schema.recipe other) {
    return new com.baeldung.schema.recipe.Builder(other);
  }

  /**
   * RecordBuilder for recipe instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<recipe>
    implements org.apache.avro.data.RecordBuilder<recipe> {

    /** Id of the recipe */
    private int id;
    /** Name of the recipe */
    private java.lang.CharSequence name;
    /** Description of the recipe */
    private java.lang.CharSequence description;
    /** Ingredients of the recipe */
    private java.lang.CharSequence ingredients;
    /** Instructions of the recipe */
    private java.lang.CharSequence instructions;
    /** Evaluation of the recipe */
    private int evaluation;
    /** Preparation time of the recipe */
    private int prepationTime;
    /** Category of the recipe */
    private java.lang.CharSequence category;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.baeldung.schema.recipe.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ingredients)) {
        this.ingredients = data().deepCopy(fields()[3].schema(), other.ingredients);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.instructions)) {
        this.instructions = data().deepCopy(fields()[4].schema(), other.instructions);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.evaluation)) {
        this.evaluation = data().deepCopy(fields()[5].schema(), other.evaluation);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.prepationTime)) {
        this.prepationTime = data().deepCopy(fields()[6].schema(), other.prepationTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.category)) {
        this.category = data().deepCopy(fields()[7].schema(), other.category);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing recipe instance
     * @param other The existing instance to copy.
     */
    private Builder(com.baeldung.schema.recipe other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ingredients)) {
        this.ingredients = data().deepCopy(fields()[3].schema(), other.ingredients);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.instructions)) {
        this.instructions = data().deepCopy(fields()[4].schema(), other.instructions);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.evaluation)) {
        this.evaluation = data().deepCopy(fields()[5].schema(), other.evaluation);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.prepationTime)) {
        this.prepationTime = data().deepCopy(fields()[6].schema(), other.prepationTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.category)) {
        this.category = data().deepCopy(fields()[7].schema(), other.category);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Id of the recipe
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * Id of the recipe
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.baeldung.schema.recipe.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Id of the recipe
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Id of the recipe
      * @return This builder.
      */
    public com.baeldung.schema.recipe.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Name of the recipe
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Name of the recipe
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.baeldung.schema.recipe.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Name of the recipe
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * Name of the recipe
      * @return This builder.
      */
    public com.baeldung.schema.recipe.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Description of the recipe
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * Description of the recipe
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.baeldung.schema.recipe.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Description of the recipe
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * Description of the recipe
      * @return This builder.
      */
    public com.baeldung.schema.recipe.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ingredients' field.
      * Ingredients of the recipe
      * @return The value.
      */
    public java.lang.CharSequence getIngredients() {
      return ingredients;
    }

    /**
      * Sets the value of the 'ingredients' field.
      * Ingredients of the recipe
      * @param value The value of 'ingredients'.
      * @return This builder.
      */
    public com.baeldung.schema.recipe.Builder setIngredients(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.ingredients = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ingredients' field has been set.
      * Ingredients of the recipe
      * @return True if the 'ingredients' field has been set, false otherwise.
      */
    public boolean hasIngredients() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ingredients' field.
      * Ingredients of the recipe
      * @return This builder.
      */
    public com.baeldung.schema.recipe.Builder clearIngredients() {
      ingredients = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'instructions' field.
      * Instructions of the recipe
      * @return The value.
      */
    public java.lang.CharSequence getInstructions() {
      return instructions;
    }

    /**
      * Sets the value of the 'instructions' field.
      * Instructions of the recipe
      * @param value The value of 'instructions'.
      * @return This builder.
      */
    public com.baeldung.schema.recipe.Builder setInstructions(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.instructions = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'instructions' field has been set.
      * Instructions of the recipe
      * @return True if the 'instructions' field has been set, false otherwise.
      */
    public boolean hasInstructions() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'instructions' field.
      * Instructions of the recipe
      * @return This builder.
      */
    public com.baeldung.schema.recipe.Builder clearInstructions() {
      instructions = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'evaluation' field.
      * Evaluation of the recipe
      * @return The value.
      */
    public java.lang.Integer getEvaluation() {
      return evaluation;
    }

    /**
      * Sets the value of the 'evaluation' field.
      * Evaluation of the recipe
      * @param value The value of 'evaluation'.
      * @return This builder.
      */
    public com.baeldung.schema.recipe.Builder setEvaluation(int value) {
      validate(fields()[5], value);
      this.evaluation = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'evaluation' field has been set.
      * Evaluation of the recipe
      * @return True if the 'evaluation' field has been set, false otherwise.
      */
    public boolean hasEvaluation() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'evaluation' field.
      * Evaluation of the recipe
      * @return This builder.
      */
    public com.baeldung.schema.recipe.Builder clearEvaluation() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'prepationTime' field.
      * Preparation time of the recipe
      * @return The value.
      */
    public java.lang.Integer getPrepationTime() {
      return prepationTime;
    }

    /**
      * Sets the value of the 'prepationTime' field.
      * Preparation time of the recipe
      * @param value The value of 'prepationTime'.
      * @return This builder.
      */
    public com.baeldung.schema.recipe.Builder setPrepationTime(int value) {
      validate(fields()[6], value);
      this.prepationTime = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'prepationTime' field has been set.
      * Preparation time of the recipe
      * @return True if the 'prepationTime' field has been set, false otherwise.
      */
    public boolean hasPrepationTime() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'prepationTime' field.
      * Preparation time of the recipe
      * @return This builder.
      */
    public com.baeldung.schema.recipe.Builder clearPrepationTime() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * Category of the recipe
      * @return The value.
      */
    public java.lang.CharSequence getCategory() {
      return category;
    }

    /**
      * Sets the value of the 'category' field.
      * Category of the recipe
      * @param value The value of 'category'.
      * @return This builder.
      */
    public com.baeldung.schema.recipe.Builder setCategory(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.category = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * Category of the recipe
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'category' field.
      * Category of the recipe
      * @return This builder.
      */
    public com.baeldung.schema.recipe.Builder clearCategory() {
      category = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public recipe build() {
      try {
        recipe record = new recipe();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.ingredients = fieldSetFlags()[3] ? this.ingredients : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.instructions = fieldSetFlags()[4] ? this.instructions : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.evaluation = fieldSetFlags()[5] ? this.evaluation : (java.lang.Integer) defaultValue(fields()[5]);
        record.prepationTime = fieldSetFlags()[6] ? this.prepationTime : (java.lang.Integer) defaultValue(fields()[6]);
        record.category = fieldSetFlags()[7] ? this.category : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<recipe>
    WRITER$ = (org.apache.avro.io.DatumWriter<recipe>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<recipe>
    READER$ = (org.apache.avro.io.DatumReader<recipe>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
